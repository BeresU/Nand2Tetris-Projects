class Graphics {
    function void drawBackground () {
        do Graphics.drawVeritcalSides();
        do Graphics.drawHorizontalSides();
        return;
    }

    function void drawVeritcalSides(){
        var int i;
        var int rows;
        var int rowAddress;

        let i = 1;
        let rows = 15;

        while(i < rows) {
            let rowAddress = 512*i;
            do Graphics.drawBackgroundBlock(rowAddress);
            do Graphics.drawBackgroundBlock(31+rowAddress);
            let i = i + 1;
        }
        return;
    }

    function void drawHorizontalSides(){
        var int i;
        var int columns;
        var int bottomPixels;

        let i = 0;
        let columns = 32;
        let bottomPixels = 512*15;

        while(i < columns) {
            do Graphics.drawBackgroundBlock(i);
            do Graphics.drawBackgroundBlock(bottomPixels + i);
            let i = i + 1;
        }
        return;
    }

    function void drawBackgroundBlock(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, -1);
        do Memory.poke(memAddress +32, -32631);
        do Memory.poke(memAddress +64, -22527);
        do Memory.poke(memAddress +96, -30559);
        do Memory.poke(memAddress +128, -32759);
        do Memory.poke(memAddress +160, -28383);
        do Memory.poke(memAddress +192, -32635);
        do Memory.poke(memAddress +224, -31727);
        do Memory.poke(memAddress +256, -28663);
        do Memory.poke(memAddress +288, -32639);
        do Memory.poke(memAddress +320, -23999);
        do Memory.poke(memAddress +352, -32621);
        do Memory.poke(memAddress +384, -27647);
        do Memory.poke(memAddress +416, -16095);
        do Memory.poke(memAddress +448, -30717);
        do Memory.poke(memAddress +480, -1);
        return;
    }

    function void drawPlayer(int location) {
        var int memAddress; 
        let memAddress = 16384+location;

        // column 0
        do Memory.poke(memAddress, -1);
        do Memory.poke(memAddress +32, -32767);
        do Memory.poke(memAddress +64, -32767);
        do Memory.poke(memAddress +96, -24583);
        do Memory.poke(memAddress +128, -28663);
        do Memory.poke(memAddress +160, -28663);
        do Memory.poke(memAddress +192, -27703);
        do Memory.poke(memAddress +224, -28087);
        do Memory.poke(memAddress +256, -28087);
        do Memory.poke(memAddress +288, -27703);
        do Memory.poke(memAddress +320, -28663);
        do Memory.poke(memAddress +352, -28663);
        do Memory.poke(memAddress +384, -24583);
        do Memory.poke(memAddress +416, -32767);
        do Memory.poke(memAddress +448, -32767);
        do Memory.poke(memAddress +480, -1);
        return;
    }

    function boolean isTileOccupied(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        
        if (~(Memory.peek(memAddress) = 0)) {return true;}
        if (~(Memory.peek(memAddress + 32) = 0)) {return true;}
        if (~(Memory.peek(memAddress + 64) = 0)) {return true;}
        if (~(Memory.peek(memAddress + 96) = 0)) {return true;}
        if (~(Memory.peek(memAddress + 128) = 0)) {return true;}
        if (~(Memory.peek(memAddress + 160) = 0)) {return true;}
        if (~(Memory.peek(memAddress + 192) = 0)) {return true;}
        if (~(Memory.peek(memAddress + 224) = 0)) {return true;}
        if (~(Memory.peek(memAddress + 256) = 0)) {return true;}
        if (~(Memory.peek(memAddress + 288) = 0)) {return true;}
        if (~(Memory.peek(memAddress + 320) = 0)) {return true;}
        if (~(Memory.peek(memAddress + 352) = 0)) {return true;}
        if (~(Memory.peek(memAddress + 384) = 0)) {return true;}
        if (~(Memory.peek(memAddress + 416) = 0)) {return true;}
        if (~(Memory.peek(memAddress + 448) = 0)) {return true;}
        if (~(Memory.peek(memAddress + 480) = 0)) {return true;}

        return false;
    }

    function void erasePlayer(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +32, 0);
        do Memory.poke(memAddress +64, 0);
        do Memory.poke(memAddress +96, 0);
        do Memory.poke(memAddress +128, 0);
        do Memory.poke(memAddress +160, 0);
        do Memory.poke(memAddress +192, 0);
        do Memory.poke(memAddress +224, 0);
        do Memory.poke(memAddress +256, 0);
        do Memory.poke(memAddress +288, 0);
        do Memory.poke(memAddress +320, 0);
        do Memory.poke(memAddress +352, 0);
        do Memory.poke(memAddress +384, 0);
        do Memory.poke(memAddress +416, 0);
        do Memory.poke(memAddress +448, 0);
        do Memory.poke(memAddress +480, 0);
        return;
    }

    function void drawFood(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, 1632);
        do Memory.poke(memAddress +32, 1440);
        do Memory.poke(memAddress +64, 1056);
        do Memory.poke(memAddress +96, 1056);
        do Memory.poke(memAddress +128, 960);
        do Memory.poke(memAddress +160, -4081);
        do Memory.poke(memAddress +192, -30703);
        do Memory.poke(memAddress +224, 18450);
        do Memory.poke(memAddress +256, 18450);
        do Memory.poke(memAddress +288, -30703);
        do Memory.poke(memAddress +320, -4081);
        do Memory.poke(memAddress +352, 960);
        do Memory.poke(memAddress +384, 1056);
        do Memory.poke(memAddress +416, 1056);
        do Memory.poke(memAddress +448, 1440);
        do Memory.poke(memAddress +480, 1632);
        return;
    }

    function void eraseFood(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +32, 0);
        do Memory.poke(memAddress +64, 0);
        do Memory.poke(memAddress +96, 0);
        do Memory.poke(memAddress +128, 0);
        do Memory.poke(memAddress +160, 0);
        do Memory.poke(memAddress +192, 0);
        do Memory.poke(memAddress +224, 0);
        do Memory.poke(memAddress +256, 0);
        do Memory.poke(memAddress +288, 0);
        do Memory.poke(memAddress +320, 0);
        do Memory.poke(memAddress +352, 0);
        do Memory.poke(memAddress +384, 0);
        do Memory.poke(memAddress +416, 0);
        do Memory.poke(memAddress +448, 0);
        do Memory.poke(memAddress +480, 0);
        return;
    }
}