class SnakeGame {

    field Player player;
    field Food food;
    field int direction; 
    field int waitTime;
    field int column, row;
    field int score;

    constructor SnakeGame new () {
        do Graphics.drawBackground();
        let row = 512*12;
        let column = 6;
        let player = Player.new(row + column, 4);
        let food = Food.new();
        let direction = 0;
        let waitTime = 150;
        let score = 0;
        return this;
    }   
    
    method void movePlayer(int nextPosition) {
        if (direction = 0) {return;}
        do player.moveAccordingToDirection(direction, nextPosition);
        do setCoordinatePosition();
        do Sys.wait(waitTime);
        return;
    }

    method void setCoordinatePosition() {
        if (direction = 1) {let row = row - 512;}
        if (direction = 2) {let row = row + 512;}
        if (direction = 3) {let column = column - 1;}
        if (direction = 4) {let column = column + 1;}
        return;
    }

    method void run() {
        var char key;  
        var boolean exit;
        var int nextPosition;
        let exit = false;

        while (~exit) {
            let key = Keyboard.keyPressed();

            // q
            if (key = 113)  { let exit = true; }     

            // up arrow
            if ((key = 131) & (~(direction = 2))) { let direction = 1;}   

            // down arrow
            if ((key = 133) & (~(direction = 1))) { let direction = 2;}

            // left arrow
            if ((key = 130) & (~(direction = 4))) { let direction = 3;}

            // right arrow
            if ((key = 132) & (~(direction = 3))) { let direction = 4;}  

            let nextPosition = getNextPosition(); 

            do handleFood(nextPosition);
            
            //if(isGameOver(nextPosition)) {let exit = true;}
            
            if (exit = false){
                do movePlayer(nextPosition);
            }
        } 

        do showGameOver();
        return;
    }

    method void showGameOver(){
        do player.hide();
        do food.hide();
        do Graphics.drawBackground();

        do Output.moveCursor(9, 27);
        do Output.printString("Game Over");
        do Output.moveCursor(12, 27);
        do Output.printString("Score: ");
        do Output.printInt(score);
        return;
    }

    method boolean isGameOver(int nextPosition){        
        return checkWallColision(nextPosition) | player.isCollideWithSelf(nextPosition);
    }

    method void handleFood(int nextPosition) {
        if (~(nextPosition = food.getPosition())) {return;}

        // TODO: Increase player size
        do food.hide();
        do food.spawn();

        return;
    }

    method boolean checkWallColision(int nextPosition) {
        var int playerPosition;
        
        if (((nextPosition - column) = 0) | ((nextPosition - row) = 0)) {return true;}
        if (((31 - (nextPosition - row) = 0)) | (((512*15) - (nextPosition - column) = 0))) {return true;}

        return false;
    }

    method int getNextPosition(){
        var int playerPosition;
        let playerPosition = player.getPosition();

        if(direction = 1) {return playerPosition - 512;}
        if(direction = 2) {return playerPosition + 512;}
        if(direction = 3) {return playerPosition - 1;}
        if(direction = 4) {return playerPosition + 1;}

        return 0;
    }

    method void dispose(){
        do player.dispose();
        do food.dispose();
        do Memory.deAlloc(this);
        return;
    }
} 