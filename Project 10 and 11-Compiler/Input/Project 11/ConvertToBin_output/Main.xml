<class><keyword> class </keyword><identifier category="class" usage="class name"> Main </identifier><symbol> { </symbol><subroutineDec><keyword> function </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> main </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><varDec><keyword> var </keyword><keyword> int </keyword><identifier category="local" index="0" usage="subroutine variable declaration"> value </identifier><symbol> ; </symbol></varDec><statements><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Main </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> fillMemory </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 8001 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 16 </integerConstant></term></expression><symbol> , </symbol><expression><term><symbol> - </symbol><term><integerConstant> 1 </integerConstant></term></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> let </keyword><identifier category="local" index="0" usage="let"> value </identifier><symbol> = </symbol><expression><term><identifier category="class" usage="expression use"> Memory </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> peek </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 8000 </integerConstant></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Main </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> convert </identifier><symbol> ( </symbol><expressionList><expression><term><identifier category="local" index="0" usage="expression use"> value </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> function </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> convert </identifier><symbol> ( </symbol><parameterList><keyword> int </keyword><identifier category="argument" index="0" usage="parameter list"> value </identifier></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><varDec><keyword> var </keyword><keyword> int </keyword><identifier category="local" index="0" usage="subroutine variable declaration"> mask </identifier><symbol> , </symbol><identifier category="local" index="1" usage="subroutine variable declaration"> position </identifier><symbol> ; </symbol></varDec><varDec><keyword> var </keyword><keyword> boolean </keyword><identifier category="local" index="2" usage="subroutine variable declaration"> loop </identifier><symbol> ; </symbol></varDec><statements><letStatement><keyword> let </keyword><identifier category="local" index="2" usage="let"> loop </identifier><symbol> = </symbol><expression><term><keyword> true </keyword></term></expression><symbol> ; </symbol></letStatement><whileStatement><keyword> while </keyword><symbol> ( </symbol><expression><term><identifier category="local" index="2" usage="expression use"> loop </identifier></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="local" index="1" usage="let"> position </identifier><symbol> = </symbol><expression><term><identifier category="local" index="1" usage="expression use"> position </identifier></term><symbol> + </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="0" usage="let"> mask </identifier><symbol> = </symbol><expression><term><identifier category="class" usage="expression use"> Main </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> nextMask </identifier><symbol> ( </symbol><expressionList><expression><term><identifier category="local" index="0" usage="expression use"> mask </identifier></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><symbol> ~ </symbol><term><symbol> ( </symbol><expression><term><identifier category="local" index="1" usage="expression use"> position </identifier></term><symbol> &gt; </symbol><term><integerConstant> 16 </integerConstant></term></expression><symbol> ) </symbol></term></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><symbol> ~ </symbol><term><symbol> ( </symbol><expression><term><symbol> ( </symbol><expression><term><identifier category="argument" index="0" usage="expression use"> value </identifier></term><symbol> &amp; </symbol><term><identifier category="local" index="0" usage="expression use"> mask </identifier></term></expression><symbol> ) </symbol></term><symbol> = </symbol><term><integerConstant> 0 </integerConstant></term></expression><symbol> ) </symbol></term></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Memory </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> poke </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 8000 </integerConstant></term><symbol> + </symbol><term><identifier category="local" index="1" usage="expression use"> position </identifier></term></expression><symbol> , </symbol><expression><term><integerConstant> 1 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><keyword> else </keyword><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Memory </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> poke </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 8000 </integerConstant></term><symbol> + </symbol><term><identifier category="local" index="1" usage="expression use"> position </identifier></term></expression><symbol> , </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></ifStatement></statements><symbol> } </symbol><keyword> else </keyword><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="local" index="2" usage="let"> loop </identifier><symbol> = </symbol><expression><term><keyword> false </keyword></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol></ifStatement></statements><symbol> } </symbol></whileStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> function </keyword><keyword> int </keyword><identifier category="subroutine" usage="subroutine declaration"> nextMask </identifier><symbol> ( </symbol><parameterList><keyword> int </keyword><identifier category="argument" index="0" usage="parameter list"> mask </identifier></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="argument" index="0" usage="expression use"> mask </identifier></term><symbol> = </symbol><term><integerConstant> 0 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><returnStatement><keyword> return </keyword><expression><term><integerConstant> 1 </integerConstant></term></expression><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol><keyword> else </keyword><symbol> { </symbol><statements><returnStatement><keyword> return </keyword><expression><term><identifier category="argument" index="0" usage="expression use"> mask </identifier></term><symbol> * </symbol><term><integerConstant> 2 </integerConstant></term></expression><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></ifStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> function </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> fillMemory </identifier><symbol> ( </symbol><parameterList><keyword> int </keyword><identifier category="argument" index="0" usage="parameter list"> address </identifier><symbol> , </symbol><keyword> int </keyword><identifier category="argument" index="1" usage="parameter list"> length </identifier><symbol> , </symbol><keyword> int </keyword><identifier category="argument" index="2" usage="parameter list"> value </identifier></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><whileStatement><keyword> while </keyword><symbol> ( </symbol><expression><term><identifier category="argument" index="1" usage="expression use"> length </identifier></term><symbol> &gt; </symbol><term><integerConstant> 0 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Memory </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> poke </identifier><symbol> ( </symbol><expressionList><expression><term><identifier category="argument" index="0" usage="expression use"> address </identifier></term></expression><symbol> , </symbol><expression><term><identifier category="argument" index="2" usage="expression use"> value </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> let </keyword><identifier category="argument" index="1" usage="let"> length </identifier><symbol> = </symbol><expression><term><identifier category="argument" index="1" usage="expression use"> length </identifier></term><symbol> - </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="argument" index="0" usage="let"> address </identifier><symbol> = </symbol><expression><term><identifier category="argument" index="0" usage="expression use"> address </identifier></term><symbol> + </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol></whileStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><symbol> } </symbol></class>