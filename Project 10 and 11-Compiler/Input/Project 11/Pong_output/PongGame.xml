<class><keyword> class </keyword><identifier category="class" usage="class name"> PongGame </identifier><symbol> { </symbol><classVarDec><keyword> static </keyword><identifier> PongGame </identifier><identifier category="static" index="0" usage="static declaration"> instance </identifier><symbol> ; </symbol></classVarDec><classVarDec><keyword> field </keyword><identifier> Bat </identifier><identifier category="this" index="0" usage="this declaration"> bat </identifier><symbol> ; </symbol></classVarDec><classVarDec><keyword> field </keyword><identifier> Ball </identifier><identifier category="this" index="1" usage="this declaration"> ball </identifier><symbol> ; </symbol></classVarDec><classVarDec><keyword> field </keyword><keyword> int </keyword><identifier category="this" index="2" usage="this declaration"> wall </identifier><symbol> ; </symbol></classVarDec><classVarDec><keyword> field </keyword><keyword> boolean </keyword><identifier category="this" index="3" usage="this declaration"> exit </identifier><symbol> ; </symbol></classVarDec><classVarDec><keyword> field </keyword><keyword> int </keyword><identifier category="this" index="4" usage="this declaration"> score </identifier><symbol> ; </symbol></classVarDec><classVarDec><keyword> field </keyword><keyword> int </keyword><identifier category="this" index="5" usage="this declaration"> lastWall </identifier><symbol> ; </symbol></classVarDec><classVarDec><keyword> field </keyword><keyword> int </keyword><identifier category="this" index="6" usage="this declaration"> batWidth </identifier><symbol> ; </symbol></classVarDec><subroutineDec><keyword> constructor </keyword><identifier> PongGame </identifier><identifier category="subroutine" usage="subroutine declaration"> new </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Screen </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> clearScreen </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> let </keyword><identifier category="this" index="6" usage="let"> batWidth </identifier><symbol> = </symbol><expression><term><integerConstant> 50 </integerConstant></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="this" index="0" usage="let"> bat </identifier><symbol> = </symbol><expression><term><identifier category="class" usage="expression use"> Bat </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> new </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 230 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 229 </integerConstant></term></expression><symbol> , </symbol><expression><term><identifier category="this" index="6" usage="expression use"> batWidth </identifier></term></expression><symbol> , </symbol><expression><term><integerConstant> 7 </integerConstant></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="this" index="1" usage="let"> ball </identifier><symbol> = </symbol><expression><term><identifier category="class" usage="expression use"> Ball </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> new </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 253 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 222 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 511 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 229 </integerConstant></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> do </keyword><identifier category="this" index="1" usage="do"> ball </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> setDestination </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 400 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Screen </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> drawRectangle </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 238 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 511 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 240 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> moveCursor </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 22 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> printString </identifier><symbol> ( </symbol><expressionList><expression><term><stringConstant> Score: 0 </stringConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> let </keyword><identifier category="this" index="3" usage="let"> exit </identifier><symbol> = </symbol><expression><term><keyword> false </keyword></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="this" index="4" usage="let"> score </identifier><symbol> = </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="this" index="2" usage="let"> wall </identifier><symbol> = </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="this" index="5" usage="let"> lastWall </identifier><symbol> = </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> ; </symbol></letStatement><returnStatement><keyword> return </keyword><expression><term><keyword> this </keyword></term></expression><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> method </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> dispose </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="this" index="0" usage="do"> bat </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> dispose </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="this" index="1" usage="do"> ball </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> dispose </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Memory </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> deAlloc </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> this </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> function </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> newInstance </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="static" index="0" usage="let"> instance </identifier><symbol> = </symbol><expression><term><identifier category="class" usage="expression use"> PongGame </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> new </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> function </keyword><identifier> PongGame </identifier><identifier category="subroutine" usage="subroutine declaration"> getInstance </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><returnStatement><keyword> return </keyword><expression><term><identifier category="static" index="0" usage="expression use"> instance </identifier></term></expression><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> method </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> run </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><varDec><keyword> var </keyword><keyword> char </keyword><identifier category="local" index="0" usage="subroutine variable declaration"> key </identifier><symbol> ; </symbol></varDec><statements><whileStatement><keyword> while </keyword><symbol> ( </symbol><expression><term><symbol> ~ </symbol><term><identifier category="this" index="3" usage="expression use"> exit </identifier></term></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><whileStatement><keyword> while </keyword><symbol> ( </symbol><expression><term><symbol> ( </symbol><expression><term><identifier category="local" index="0" usage="expression use"> key </identifier></term><symbol> = </symbol><term><integerConstant> 0 </integerConstant></term></expression><symbol> ) </symbol></term><symbol> &amp; </symbol><term><symbol> ( </symbol><expression><term><symbol> ~ </symbol><term><identifier category="this" index="3" usage="expression use"> exit </identifier></term></term></expression><symbol> ) </symbol></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="local" index="0" usage="let"> key </identifier><symbol> = </symbol><expression><term><identifier category="class" usage="expression use"> Keyboard </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> keyPressed </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> do </keyword><identifier category="this" index="0" usage="do"> bat </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> move </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="subroutine" usage="do"> moveBall </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Sys </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> wait </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 50 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></whileStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="local" index="0" usage="expression use"> key </identifier></term><symbol> = </symbol><term><integerConstant> 130 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="this" index="0" usage="do"> bat </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> setDirection </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 1 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><keyword> else </keyword><symbol> { </symbol><statements><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="local" index="0" usage="expression use"> key </identifier></term><symbol> = </symbol><term><integerConstant> 132 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="this" index="0" usage="do"> bat </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> setDirection </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 2 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><keyword> else </keyword><symbol> { </symbol><statements><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="local" index="0" usage="expression use"> key </identifier></term><symbol> = </symbol><term><integerConstant> 140 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="this" index="3" usage="let"> exit </identifier><symbol> = </symbol><expression><term><keyword> true </keyword></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol></ifStatement></statements><symbol> } </symbol></ifStatement></statements><symbol> } </symbol></ifStatement><whileStatement><keyword> while </keyword><symbol> ( </symbol><expression><term><symbol> ( </symbol><expression><term><symbol> ~ </symbol><term><symbol> ( </symbol><expression><term><identifier category="local" index="0" usage="expression use"> key </identifier></term><symbol> = </symbol><term><integerConstant> 0 </integerConstant></term></expression><symbol> ) </symbol></term></term></expression><symbol> ) </symbol></term><symbol> &amp; </symbol><term><symbol> ( </symbol><expression><term><symbol> ~ </symbol><term><identifier category="this" index="3" usage="expression use"> exit </identifier></term></term></expression><symbol> ) </symbol></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="local" index="0" usage="let"> key </identifier><symbol> = </symbol><expression><term><identifier category="class" usage="expression use"> Keyboard </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> keyPressed </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> do </keyword><identifier category="this" index="0" usage="do"> bat </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> move </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="subroutine" usage="do"> moveBall </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Sys </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> wait </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 50 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></whileStatement></statements><symbol> } </symbol></whileStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="this" index="3" usage="expression use"> exit </identifier></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> moveCursor </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 10 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 27 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> printString </identifier><symbol> ( </symbol><expressionList><expression><term><stringConstant> Game Over </stringConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></ifStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> method </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> moveBall </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><varDec><keyword> var </keyword><keyword> int </keyword><identifier category="local" index="0" usage="subroutine variable declaration"> bouncingDirection </identifier><symbol> , </symbol><identifier category="local" index="1" usage="subroutine variable declaration"> batLeft </identifier><symbol> , </symbol><identifier category="local" index="2" usage="subroutine variable declaration"> batRight </identifier><symbol> , </symbol><identifier category="local" index="3" usage="subroutine variable declaration"> ballLeft </identifier><symbol> , </symbol><identifier category="local" index="4" usage="subroutine variable declaration"> ballRight </identifier><symbol> ; </symbol></varDec><statements><letStatement><keyword> let </keyword><identifier category="this" index="2" usage="let"> wall </identifier><symbol> = </symbol><expression><term><identifier category="this" index="1" usage="expression use"> ball </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> move </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><symbol> ( </symbol><expression><term><identifier category="this" index="2" usage="expression use"> wall </identifier></term><symbol> &gt; </symbol><term><integerConstant> 0 </integerConstant></term></expression><symbol> ) </symbol></term><symbol> &amp; </symbol><term><symbol> ( </symbol><expression><term><symbol> ~ </symbol><term><symbol> ( </symbol><expression><term><identifier category="this" index="2" usage="expression use"> wall </identifier></term><symbol> = </symbol><term><identifier category="this" index="5" usage="expression use"> lastWall </identifier></term></expression><symbol> ) </symbol></term></term></expression><symbol> ) </symbol></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="this" index="5" usage="let"> lastWall </identifier><symbol> = </symbol><expression><term><identifier category="this" index="2" usage="expression use"> wall </identifier></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="0" usage="let"> bouncingDirection </identifier><symbol> = </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="1" usage="let"> batLeft </identifier><symbol> = </symbol><expression><term><identifier category="this" index="0" usage="expression use"> bat </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> getLeft </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="2" usage="let"> batRight </identifier><symbol> = </symbol><expression><term><identifier category="this" index="0" usage="expression use"> bat </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> getRight </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="3" usage="let"> ballLeft </identifier><symbol> = </symbol><expression><term><identifier category="this" index="1" usage="expression use"> ball </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> getLeft </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="4" usage="let"> ballRight </identifier><symbol> = </symbol><expression><term><identifier category="this" index="1" usage="expression use"> ball </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> getRight </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="this" index="2" usage="expression use"> wall </identifier></term><symbol> = </symbol><term><integerConstant> 4 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="this" index="3" usage="let"> exit </identifier><symbol> = </symbol><expression><term><symbol> ( </symbol><expression><term><identifier category="local" index="1" usage="expression use"> batLeft </identifier></term><symbol> &gt; </symbol><term><identifier category="local" index="4" usage="expression use"> ballRight </identifier></term></expression><symbol> ) </symbol></term><symbol> | </symbol><term><symbol> ( </symbol><expression><term><identifier category="local" index="2" usage="expression use"> batRight </identifier></term><symbol> &lt; </symbol><term><identifier category="local" index="3" usage="expression use"> ballLeft </identifier></term></expression><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><symbol> ~ </symbol><term><identifier category="this" index="3" usage="expression use"> exit </identifier></term></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="local" index="4" usage="expression use"> ballRight </identifier></term><symbol> &lt; </symbol><term><symbol> ( </symbol><expression><term><identifier category="local" index="1" usage="expression use"> batLeft </identifier></term><symbol> + </symbol><term><integerConstant> 10 </integerConstant></term></expression><symbol> ) </symbol></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="local" index="0" usage="let"> bouncingDirection </identifier><symbol> = </symbol><expression><term><symbol> - </symbol><term><integerConstant> 1 </integerConstant></term></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol><keyword> else </keyword><symbol> { </symbol><statements><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="local" index="3" usage="expression use"> ballLeft </identifier></term><symbol> &gt; </symbol><term><symbol> ( </symbol><expression><term><identifier category="local" index="2" usage="expression use"> batRight </identifier></term><symbol> - </symbol><term><integerConstant> 10 </integerConstant></term></expression><symbol> ) </symbol></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="local" index="0" usage="let"> bouncingDirection </identifier><symbol> = </symbol><expression><term><integerConstant> 1 </integerConstant></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol></ifStatement></statements><symbol> } </symbol></ifStatement><letStatement><keyword> let </keyword><identifier category="this" index="6" usage="let"> batWidth </identifier><symbol> = </symbol><expression><term><identifier category="this" index="6" usage="expression use"> batWidth </identifier></term><symbol> - </symbol><term><integerConstant> 2 </integerConstant></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> do </keyword><identifier category="this" index="0" usage="do"> bat </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> setWidth </identifier><symbol> ( </symbol><expressionList><expression><term><identifier category="this" index="6" usage="expression use"> batWidth </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> let </keyword><identifier category="this" index="4" usage="let"> score </identifier><symbol> = </symbol><expression><term><identifier category="this" index="4" usage="expression use"> score </identifier></term><symbol> + </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> moveCursor </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 22 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 7 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> printInt </identifier><symbol> ( </symbol><expressionList><expression><term><identifier category="this" index="4" usage="expression use"> score </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></ifStatement></statements><symbol> } </symbol></ifStatement><doStatement><keyword> do </keyword><identifier category="this" index="1" usage="do"> ball </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> bounce </identifier><symbol> ( </symbol><expressionList><expression><term><identifier category="local" index="0" usage="expression use"> bouncingDirection </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></ifStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><symbol> } </symbol></class>