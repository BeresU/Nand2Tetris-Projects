<class><keyword> class </keyword><identifier category="class" usage="class name"> Bat </identifier><symbol> { </symbol><classVarDec><keyword> field </keyword><keyword> int </keyword><identifier category="this" index="0" usage="this declaration"> x </identifier><symbol> , </symbol><identifier category="this" index="1" usage="this declaration"> y </identifier><symbol> ; </symbol></classVarDec><classVarDec><keyword> field </keyword><keyword> int </keyword><identifier category="this" index="2" usage="this declaration"> width </identifier><symbol> , </symbol><identifier category="this" index="3" usage="this declaration"> height </identifier><symbol> ; </symbol></classVarDec><classVarDec><keyword> field </keyword><keyword> int </keyword><identifier category="this" index="4" usage="this declaration"> direction </identifier><symbol> ; </symbol></classVarDec><subroutineDec><keyword> constructor </keyword><identifier> Bat </identifier><identifier category="subroutine" usage="subroutine declaration"> new </identifier><symbol> ( </symbol><parameterList><keyword> int </keyword><identifier category="argument" index="0" usage="parameter list"> Ax </identifier><symbol> , </symbol><keyword> int </keyword><identifier category="argument" index="1" usage="parameter list"> Ay </identifier><symbol> , </symbol><keyword> int </keyword><identifier category="argument" index="2" usage="parameter list"> Awidth </identifier><symbol> , </symbol><keyword> int </keyword><identifier category="argument" index="3" usage="parameter list"> Aheight </identifier></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="this" index="0" usage="let"> x </identifier><symbol> = </symbol><expression><term><identifier category="argument" index="0" usage="expression use"> Ax </identifier></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="this" index="1" usage="let"> y </identifier><symbol> = </symbol><expression><term><identifier category="argument" index="1" usage="expression use"> Ay </identifier></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="this" index="2" usage="let"> width </identifier><symbol> = </symbol><expression><term><identifier category="argument" index="2" usage="expression use"> Awidth </identifier></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="this" index="3" usage="let"> height </identifier><symbol> = </symbol><expression><term><identifier category="argument" index="3" usage="expression use"> Aheight </identifier></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="this" index="4" usage="let"> direction </identifier><symbol> = </symbol><expression><term><integerConstant> 2 </integerConstant></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> do </keyword><identifier category="subroutine" usage="do"> show </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> return </keyword><expression><term><keyword> this </keyword></term></expression><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> method </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> dispose </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Memory </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> deAlloc </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> this </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> method </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> show </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Screen </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> setColor </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> true </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="subroutine" usage="do"> draw </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> method </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> hide </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Screen </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> setColor </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> false </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="subroutine" usage="do"> draw </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> method </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> draw </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Screen </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> drawRectangle </identifier><symbol> ( </symbol><expressionList><expression><term><identifier category="this" index="0" usage="expression use"> x </identifier></term></expression><symbol> , </symbol><expression><term><identifier category="this" index="1" usage="expression use"> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier category="this" index="0" usage="expression use"> x </identifier></term><symbol> + </symbol><term><identifier category="this" index="2" usage="expression use"> width </identifier></term></expression><symbol> , </symbol><expression><term><identifier category="this" index="1" usage="expression use"> y </identifier></term><symbol> + </symbol><term><identifier category="this" index="3" usage="expression use"> height </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> method </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> setDirection </identifier><symbol> ( </symbol><parameterList><keyword> int </keyword><identifier category="argument" index="1" usage="parameter list"> Adirection </identifier></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="this" index="4" usage="let"> direction </identifier><symbol> = </symbol><expression><term><identifier category="argument" index="1" usage="expression use"> Adirection </identifier></term></expression><symbol> ; </symbol></letStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> method </keyword><keyword> int </keyword><identifier category="subroutine" usage="subroutine declaration"> getLeft </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><returnStatement><keyword> return </keyword><expression><term><identifier category="this" index="0" usage="expression use"> x </identifier></term></expression><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> method </keyword><keyword> int </keyword><identifier category="subroutine" usage="subroutine declaration"> getRight </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><returnStatement><keyword> return </keyword><expression><term><identifier category="this" index="0" usage="expression use"> x </identifier></term><symbol> + </symbol><term><identifier category="this" index="2" usage="expression use"> width </identifier></term></expression><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> method </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> setWidth </identifier><symbol> ( </symbol><parameterList><keyword> int </keyword><identifier category="argument" index="1" usage="parameter list"> Awidth </identifier></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="subroutine" usage="do"> hide </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> let </keyword><identifier category="this" index="2" usage="let"> width </identifier><symbol> = </symbol><expression><term><identifier category="argument" index="1" usage="expression use"> Awidth </identifier></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> do </keyword><identifier category="subroutine" usage="do"> show </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> method </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> move </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="this" index="4" usage="expression use"> direction </identifier></term><symbol> = </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="this" index="0" usage="let"> x </identifier><symbol> = </symbol><expression><term><identifier category="this" index="0" usage="expression use"> x </identifier></term><symbol> - </symbol><term><integerConstant> 4 </integerConstant></term></expression><symbol> ; </symbol></letStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="this" index="0" usage="expression use"> x </identifier></term><symbol> &lt; </symbol><term><integerConstant> 0 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="this" index="0" usage="let"> x </identifier><symbol> = </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol></ifStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Screen </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> setColor </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> false </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Screen </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> drawRectangle </identifier><symbol> ( </symbol><expressionList><expression><term><symbol> ( </symbol><expression><term><identifier category="this" index="0" usage="expression use"> x </identifier></term><symbol> + </symbol><term><identifier category="this" index="2" usage="expression use"> width </identifier></term></expression><symbol> ) </symbol></term><symbol> + </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> , </symbol><expression><term><identifier category="this" index="1" usage="expression use"> y </identifier></term></expression><symbol> , </symbol><expression><term><symbol> ( </symbol><expression><term><identifier category="this" index="0" usage="expression use"> x </identifier></term><symbol> + </symbol><term><identifier category="this" index="2" usage="expression use"> width </identifier></term></expression><symbol> ) </symbol></term><symbol> + </symbol><term><integerConstant> 4 </integerConstant></term></expression><symbol> , </symbol><expression><term><identifier category="this" index="1" usage="expression use"> y </identifier></term><symbol> + </symbol><term><identifier category="this" index="3" usage="expression use"> height </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Screen </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> setColor </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> true </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Screen </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> drawRectangle </identifier><symbol> ( </symbol><expressionList><expression><term><identifier category="this" index="0" usage="expression use"> x </identifier></term></expression><symbol> , </symbol><expression><term><identifier category="this" index="1" usage="expression use"> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier category="this" index="0" usage="expression use"> x </identifier></term><symbol> + </symbol><term><integerConstant> 3 </integerConstant></term></expression><symbol> , </symbol><expression><term><identifier category="this" index="1" usage="expression use"> y </identifier></term><symbol> + </symbol><term><identifier category="this" index="3" usage="expression use"> height </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><keyword> else </keyword><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="this" index="0" usage="let"> x </identifier><symbol> = </symbol><expression><term><identifier category="this" index="0" usage="expression use"> x </identifier></term><symbol> + </symbol><term><integerConstant> 4 </integerConstant></term></expression><symbol> ; </symbol></letStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><symbol> ( </symbol><expression><term><identifier category="this" index="0" usage="expression use"> x </identifier></term><symbol> + </symbol><term><identifier category="this" index="2" usage="expression use"> width </identifier></term></expression><symbol> ) </symbol></term><symbol> &gt; </symbol><term><integerConstant> 511 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="this" index="0" usage="let"> x </identifier><symbol> = </symbol><expression><term><integerConstant> 511 </integerConstant></term><symbol> - </symbol><term><identifier category="this" index="2" usage="expression use"> width </identifier></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol></ifStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Screen </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> setColor </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> false </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Screen </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> drawRectangle </identifier><symbol> ( </symbol><expressionList><expression><term><identifier category="this" index="0" usage="expression use"> x </identifier></term><symbol> - </symbol><term><integerConstant> 4 </integerConstant></term></expression><symbol> , </symbol><expression><term><identifier category="this" index="1" usage="expression use"> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier category="this" index="0" usage="expression use"> x </identifier></term><symbol> - </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> , </symbol><expression><term><identifier category="this" index="1" usage="expression use"> y </identifier></term><symbol> + </symbol><term><identifier category="this" index="3" usage="expression use"> height </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Screen </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> setColor </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> true </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Screen </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> drawRectangle </identifier><symbol> ( </symbol><expressionList><expression><term><symbol> ( </symbol><expression><term><identifier category="this" index="0" usage="expression use"> x </identifier></term><symbol> + </symbol><term><identifier category="this" index="2" usage="expression use"> width </identifier></term></expression><symbol> ) </symbol></term><symbol> - </symbol><term><integerConstant> 3 </integerConstant></term></expression><symbol> , </symbol><expression><term><identifier category="this" index="1" usage="expression use"> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier category="this" index="0" usage="expression use"> x </identifier></term><symbol> + </symbol><term><identifier category="this" index="2" usage="expression use"> width </identifier></term></expression><symbol> , </symbol><expression><term><identifier category="this" index="1" usage="expression use"> y </identifier></term><symbol> + </symbol><term><identifier category="this" index="3" usage="expression use"> height </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></ifStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><symbol> } </symbol></class>