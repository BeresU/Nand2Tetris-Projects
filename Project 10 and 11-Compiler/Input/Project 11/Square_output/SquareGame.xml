<class><keyword> class </keyword><identifier category="class" usage="class name"> SquareGame </identifier><symbol> { </symbol><classVarDec><keyword> field </keyword><identifier> Square </identifier><identifier category="this" index="0" usage="this declaration"> square </identifier><symbol> ; </symbol></classVarDec><classVarDec><keyword> field </keyword><keyword> int </keyword><identifier category="this" index="1" usage="this declaration"> direction </identifier><symbol> ; </symbol></classVarDec><subroutineDec><keyword> constructor </keyword><identifier> SquareGame </identifier><identifier category="subroutine" usage="subroutine declaration"> new </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="this" index="0" usage="let"> square </identifier><symbol> = </symbol><expression><term><identifier category="class" usage="expression use"> Square </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> new </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 30 </integerConstant></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="this" index="1" usage="let"> direction </identifier><symbol> = </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> ; </symbol></letStatement><returnStatement><keyword> return </keyword><expression><term><keyword> this </keyword></term></expression><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> method </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> dispose </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="this" index="0" usage="do"> square </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> dispose </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Memory </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> deAlloc </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> this </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> method </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> moveSquare </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="this" index="1" usage="expression use"> direction </identifier></term><symbol> = </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="this" index="0" usage="do"> square </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> moveUp </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></ifStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="this" index="1" usage="expression use"> direction </identifier></term><symbol> = </symbol><term><integerConstant> 2 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="this" index="0" usage="do"> square </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> moveDown </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></ifStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="this" index="1" usage="expression use"> direction </identifier></term><symbol> = </symbol><term><integerConstant> 3 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="this" index="0" usage="do"> square </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> moveLeft </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></ifStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="this" index="1" usage="expression use"> direction </identifier></term><symbol> = </symbol><term><integerConstant> 4 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="this" index="0" usage="do"> square </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> moveRight </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></ifStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Sys </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> wait </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 5 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> method </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> run </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><varDec><keyword> var </keyword><keyword> char </keyword><identifier category="local" index="0" usage="subroutine variable declaration"> key </identifier><symbol> ; </symbol></varDec><varDec><keyword> var </keyword><keyword> boolean </keyword><identifier category="local" index="1" usage="subroutine variable declaration"> exit </identifier><symbol> ; </symbol></varDec><statements><letStatement><keyword> let </keyword><identifier category="local" index="1" usage="let"> exit </identifier><symbol> = </symbol><expression><term><keyword> false </keyword></term></expression><symbol> ; </symbol></letStatement><whileStatement><keyword> while </keyword><symbol> ( </symbol><expression><term><symbol> ~ </symbol><term><identifier category="local" index="1" usage="expression use"> exit </identifier></term></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><whileStatement><keyword> while </keyword><symbol> ( </symbol><expression><term><identifier category="local" index="0" usage="expression use"> key </identifier></term><symbol> = </symbol><term><integerConstant> 0 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="local" index="0" usage="let"> key </identifier><symbol> = </symbol><expression><term><identifier category="class" usage="expression use"> Keyboard </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> keyPressed </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> do </keyword><identifier category="subroutine" usage="do"> moveSquare </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></whileStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="local" index="0" usage="expression use"> key </identifier></term><symbol> = </symbol><term><integerConstant> 81 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="local" index="1" usage="let"> exit </identifier><symbol> = </symbol><expression><term><keyword> true </keyword></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol></ifStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="local" index="0" usage="expression use"> key </identifier></term><symbol> = </symbol><term><integerConstant> 90 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="this" index="0" usage="do"> square </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> decSize </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></ifStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="local" index="0" usage="expression use"> key </identifier></term><symbol> = </symbol><term><integerConstant> 88 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="this" index="0" usage="do"> square </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> incSize </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></ifStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="local" index="0" usage="expression use"> key </identifier></term><symbol> = </symbol><term><integerConstant> 131 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="this" index="1" usage="let"> direction </identifier><symbol> = </symbol><expression><term><integerConstant> 1 </integerConstant></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol></ifStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="local" index="0" usage="expression use"> key </identifier></term><symbol> = </symbol><term><integerConstant> 133 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="this" index="1" usage="let"> direction </identifier><symbol> = </symbol><expression><term><integerConstant> 2 </integerConstant></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol></ifStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="local" index="0" usage="expression use"> key </identifier></term><symbol> = </symbol><term><integerConstant> 130 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="this" index="1" usage="let"> direction </identifier><symbol> = </symbol><expression><term><integerConstant> 3 </integerConstant></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol></ifStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="local" index="0" usage="expression use"> key </identifier></term><symbol> = </symbol><term><integerConstant> 132 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="this" index="1" usage="let"> direction </identifier><symbol> = </symbol><expression><term><integerConstant> 4 </integerConstant></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol></ifStatement><whileStatement><keyword> while </keyword><symbol> ( </symbol><expression><term><symbol> ~ </symbol><term><symbol> ( </symbol><expression><term><identifier category="local" index="0" usage="expression use"> key </identifier></term><symbol> = </symbol><term><integerConstant> 0 </integerConstant></term></expression><symbol> ) </symbol></term></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="local" index="0" usage="let"> key </identifier><symbol> = </symbol><expression><term><identifier category="class" usage="expression use"> Keyboard </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> keyPressed </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> do </keyword><identifier category="subroutine" usage="do"> moveSquare </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></whileStatement></statements><symbol> } </symbol></whileStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><symbol> } </symbol></class>