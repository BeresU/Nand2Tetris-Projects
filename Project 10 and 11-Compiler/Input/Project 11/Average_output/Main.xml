<class><keyword> class </keyword><identifier category="class" usage="class name"> Main </identifier><symbol> { </symbol><subroutineDec><keyword> function </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> main </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><varDec><keyword> var </keyword><identifier> Array </identifier><identifier category="local" index="0" usage="subroutine variable declaration"> a </identifier><symbol> ; </symbol></varDec><varDec><keyword> var </keyword><keyword> int </keyword><identifier category="local" index="1" usage="subroutine variable declaration"> length </identifier><symbol> ; </symbol></varDec><varDec><keyword> var </keyword><keyword> int </keyword><identifier category="local" index="2" usage="subroutine variable declaration"> i </identifier><symbol> , </symbol><identifier category="local" index="3" usage="subroutine variable declaration"> sum </identifier><symbol> ; </symbol></varDec><statements><letStatement><keyword> let </keyword><identifier category="local" index="1" usage="let"> length </identifier><symbol> = </symbol><expression><term><identifier category="class" usage="expression use"> Keyboard </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> readInt </identifier><symbol> ( </symbol><expressionList><expression><term><stringConstant> How many numbers?  </stringConstant></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="0" usage="let"> a </identifier><symbol> = </symbol><expression><term><identifier category="class" usage="expression use"> Array </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> new </identifier><symbol> ( </symbol><expressionList><expression><term><identifier category="local" index="1" usage="expression use"> length </identifier></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="2" usage="let"> i </identifier><symbol> = </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> ; </symbol></letStatement><whileStatement><keyword> while </keyword><symbol> ( </symbol><expression><term><identifier category="local" index="2" usage="expression use"> i </identifier></term><symbol> &lt; </symbol><term><identifier category="local" index="1" usage="expression use"> length </identifier></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="local" index="0" usage="let"> a </identifier><symbol> [ </symbol><expression><term><identifier category="local" index="2" usage="expression use"> i </identifier></term></expression><symbol> ] </symbol><symbol> = </symbol><expression><term><identifier category="class" usage="expression use"> Keyboard </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> readInt </identifier><symbol> ( </symbol><expressionList><expression><term><stringConstant> Enter a number:  </stringConstant></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="3" usage="let"> sum </identifier><symbol> = </symbol><expression><term><identifier category="local" index="3" usage="expression use"> sum </identifier></term><symbol> + </symbol><term><identifier category="local" index="0" usage="expression use"> a </identifier><symbol> [ </symbol><expression><term><identifier category="local" index="2" usage="expression use"> i </identifier></term></expression><symbol> ] </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="2" usage="let"> i </identifier><symbol> = </symbol><expression><term><identifier category="local" index="2" usage="expression use"> i </identifier></term><symbol> + </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol></whileStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> printString </identifier><symbol> ( </symbol><expressionList><expression><term><stringConstant> The average is  </stringConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> printInt </identifier><symbol> ( </symbol><expressionList><expression><term><identifier category="local" index="3" usage="expression use"> sum </identifier></term><symbol> / </symbol><term><identifier category="local" index="1" usage="expression use"> length </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><symbol> } </symbol></class>