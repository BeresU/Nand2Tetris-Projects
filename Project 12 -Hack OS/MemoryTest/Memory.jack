// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 


class Memory {
    static Array ram;
    static int freeListHeadIndex, freeListTailIndex;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let freeListHeadIndex = 2048;
        let freeListTailIndex = freeListHeadIndex;

        do Memory.poke(freeListHeadIndex, 0);
        do Memory.poke(freeListHeadIndex + 1, 14334);
        
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

        /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function Array alloc(int size) {
        var int currentAddress, targetAddress, parentAddress, blockSize, deltaSize;

        let currentAddress = freeListHeadIndex;

        while (~(currentAddress = 0)) {
            let blockSize = Memory.peek(currentAddress + 1);

            if (~(blockSize < (size + 2))) {
                let deltaSize = blockSize - size;

                if (deltaSize = 0){
                    let targetAddress = currentAddress;

                    if (parentAddress = 0){
                        let freeListHeadIndex = Memory.peek(currentAddress);
                    }
                    else{
                        do Memory.poke(parentAddress, Memory.peek(currentAddress));
                    }
                }
                else {
                    let deltaSize = deltaSize - 2;
                    let targetAddress = currentAddress + 2 + deltaSize;

                    do Memory.poke(currentAddress + 1, deltaSize);
                }

                do Memory.poke(targetAddress, 0);
                do Memory.poke(targetAddress + 1, size);

                if (targetAddress = freeListTailIndex) {
                    let freeListTailIndex = parentAddress;
                }

                return targetAddress + 2;
            }

            let parentAddress = currentAddress;
            let currentAddress = Memory.peek(currentAddress);
        }

        do Sys.error(0);
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int freeBlockAddr;
        let freeBlockAddr = o - 2;
        do Memory.poke(freeListTailIndex, freeBlockAddr);
        let freeListTailIndex = freeBlockAddr;
        return;
    }    
}
