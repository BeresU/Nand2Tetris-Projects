// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int currentColor, screenBaseAddress;
    static Array powersOfTwo; 
    static boolean debug;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        let powersOfTwo = Array.new(16);
        let currentColor = 1;
        let screenBaseAddress = 16384;

        let i = 1;
        let powersOfTwo[0] = 1; 

        while(i < 16){
            let powersOfTwo[i] = powersOfTwo[i-1] + powersOfTwo[i-1];
            let i = i + 1;
        }

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;

        while (i < 8192){
            do Memory.poke(screenBaseAddress + i, 0);
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if (b=true){
            let currentColor = 1;
        }
        else{
            let currentColor = 0;
        }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, bitPlace, pixelPlace;
        var int debug;

        let address = screenBaseAddress + (32 * y + (x / 16));
        let value = Memory.peek(address);
        let bitPlace = Screen.mod(x, 16);
        let pixelPlace = powersOfTwo[bitPlace];

        if (currentColor = 0) {
            let value = value & ~(pixelPlace);
        }
        else{
            let value = value | pixelPlace;
        }
        
        do Memory.poke(address, value);
        return;
    }
    

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, diff, xPosition, yPosition;
        
        if (x1 = x2) {
            do Screen.drawVerticalLine(y1, y2, x1);
            return;
        } 

        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        } 

        let a = 0;
        let b = 0;
        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);   
        let diff = 0;
        let yPosition = y1 > y2;
        let xPosition = x1 > x2;

        while (~(a > dx) & ~(b > dy)) {
            do Screen.drawPixel(x1 + (Screen.xor(a, xPosition) - xPosition), y1 + (Screen.xor(b, yPosition) - yPosition));

            if (diff < 0) {  
                let a = a + 1;
                let diff = diff + dy;
            }
            else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }

        return;
    }

    function void drawVerticalLine(int y1, int y2, int x){
        var int d, temp, steps;
        let d = Math.abs(y2 - y1);

        if (y1 > y2) {
            let temp = y2;
            let y2 = y1;
            let y1 = temp;
        }

        while (~(steps > d)){
            do Screen.drawPixel(x, y1 + steps);
            let steps = steps + 1;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy, ySteps;

        let dy = y2 - y1;
        let ySteps = 0;

        while (~(ySteps > dy)){
            do Screen.drawHorizontalLine(x1, x2, y1 + ySteps);

            let ySteps = ySteps + 1;
        }
        
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y){
        var int dx, steps, value, mod, address, rowAddress, color, pixels, temp, maxPixels;

        //358
        // 362
        var int log;

        if (x1 = x2) {
            do Screen.drawPixel(x1, y);
            return;
        }
    
        let log = 8000;
        if (x1 > x2) {
            let temp = x2;
            let x2 = x1;
            let x1 = temp;
        }

        let dx = x2 - x1;
        let rowAddress = 32 * y;
        let color = -currentColor;
        let steps = 0;
        let mod = Screen.mod(x1, 16);

        if (x1 = 358){
            let log[7] = mod;
        }

        let steps = 16 - mod; 
        let address = screenBaseAddress + (rowAddress + (x1 / 16));
        let value = Memory.peek(address);
        let pixels = 0;
        let maxPixels = dx + mod +  1;
        
        let maxPixels = Math.min(16, maxPixels);

        if (x1 = 358){
            let log[5] = mod;
        }

        while (mod < maxPixels){
            let pixels = pixels + powersOfTwo[mod];
            let mod = mod + 1;
        }
        
        if (x1 = 358){
            let log[0] = maxPixels;
            let log[1] = x1;
            let log[2] = x2;
            let log[3] = address;
            let log[4] = pixels;
            let log[6] = steps;
            let log[11] = dx;
        }

 
        if (currentColor = 1){
            let value = value | pixels;
        }
        else{
            let value = value & ~(pixels);
        }
    
        do Memory.poke(address, value);

        if (maxPixels < 16) {return;}

        while (~(steps > (dx - 16))){
            let debug = true;

            let address = screenBaseAddress + (rowAddress + ((x1 + steps) / 16));
            do Memory.poke(address, color);

            let steps = steps + 16;
        }

        let mod = Screen.mod(x2, 16);

        let address = screenBaseAddress + (rowAddress + (x2 / 16));
        let value = Memory.peek(address);

        let pixels = 0;

        let maxPixels = 0;

        // if (x1 = 358){
        //     let maxPixels = 10;
        //     let log[10] = mod;
        // }

        while (~(mod < 0)){ 
            let pixels = pixels + powersOfTwo[mod];            
            let mod = mod - 1;
        }

        if (currentColor = 1){
            let value = value | pixels;
        }
        else{
            let value = value & ~(pixels);
        }
            
        do Memory.poke(address, value); 

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx, rSquared, log;
        var boolean d;
        
        let log = 9000;
        let r = Math.min(r, 181);

        let dy = -r;
        let rSquared = r * r;

        while (~(dy > r)){

            let dx = Math.sqrt((rSquared - (dy * dy)));

            if (d = false & (~((x-dx) = (x+dx)))){
                let log[0] = x - dx;
                let log[1] = x + dx;
                let log[2] = y + dy;
            }
            do Screen.drawHorizontalLine(x - dx, x + dx, y + dy);
            let dy = dy + 1;
        }

        return;
    }

    function void drawHorizontalLine2(int x1, int x2, int y){
        var int d, position, steps;
        let d = Math.abs(x2 - x1);
        let position = x1 > x2;

        while (~(steps > d)){
            do Screen.drawPixel(x1 + (Screen.xor(steps, position) - position), y);
            let steps = steps + 1;
        }

        return;
    }


    function int mod (int a, int b) {
        return  a - (b * (a / b));
    }

    function int xor(int a, int b) {
        return ((a & ~b) | (b & ~a));
    }
}
