// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int currentColor, screenBaseAddress;
    static Array powersOfTwo; 

    /** Initializes the Screen. */
    function void init() {
        var int i;
        let powersOfTwo = Array.new(16);
        let currentColor = 1;
        let screenBaseAddress = 16384;

        let i = 1;
        let powersOfTwo[0] = 1; 

        while(i < 16){
            let powersOfTwo[i] = powersOfTwo[i-1] + powersOfTwo[i-1];
            let i = i + 1;
        }

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;

        while (i < 8192){
            do Memory.poke(screenBaseAddress + i, 0);
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if (b=true){
            let currentColor = 1;
        }
        else{
            let currentColor = 0;
        }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, bitPlace, pixelNumber;
        var int debug;

        let address = screenBaseAddress + (32 * y + (x / 16));
        let value = Memory.peek(address);
        let bitPlace = Screen.mod(x, 16);
        let pixelNumber = powersOfTwo[bitPlace];

        if (currentColor = 0){
            let value = value & ~(pixelNumber);
        }
        else{
            let value = value | pixelNumber;
        }
        
        do Memory.poke(address, value);
        return;
    }
    

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, diff, xPosition, yPosition;

        if (x1 = x2 | y1 = y2) {    
            do Screen.drawStraightLine(x1, y1, x2, y2);
            return;         
        }

        let a = 0;
        let b = 0;
        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);   
        let diff = 0;
        let yPosition = y1 > y2;
        let xPosition = x1 > x2;

        while (~(a > dx) & ~(b > dy)) {
            do Screen.drawPixel(x1 + (Screen.xor(a, xPosition) - xPosition), y1 + (Screen.xor(b, yPosition) - yPosition));

            if (diff < 0) {  
                let a = a + 1;
                let diff = diff + dy;
            }
            else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }

        return;
    }

    function void drawStraightLine(int x1, int y1, int x2, int y2) {
        var int steps, d, yPosition, xPosition, yModifier, xModifier;

        if (x1 = x2) {
            let d = Math.abs(y2 - y1);
            let xModifier = 0;
            let yModifier = -1;
        } 
        else {
            let d = Math.abs(x2 - x1);
            let xModifier = -1;
            let yModifier = 0;
        }

        let xPosition = x1 > x2;
        let yPosition = y1 > y2;


        while (~(steps > d)){
            do Screen.drawPixel(x1 + ((Screen.xor(steps, xPosition) - xPosition) & xModifier), y1 + ((Screen.xor(steps, yPosition) - yPosition) & yModifier));
            let steps = steps + 1;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy, dx, ySteps,xSteps, address, color, mod, value, debug;
        var boolean dolog;
        let dolog = false;

        let dy = y2 - y1;
        let dx = x2 - x1;
        let ySteps = 0;
        let color = -currentColor;

        let xSteps = 0;

        let debug = 9000;

        while (~(ySteps > dy)){
            let xSteps = 0;
            let mod = Screen.mod(x1, 16);

            if (mod > 0){
                let address = screenBaseAddress + (32 * (y1 + ySteps) + (x1 / 16));
                let value = Memory.peek(address);
                while (mod < 16){
                    if (currentColor = 1){
                        let value = value | powersOfTwo[mod];
                    }
                    else{
                        let value = value & ~(powersOfTwo[mod]);
                    }
                    let mod = mod + 1;
                }
                
                do Memory.poke(address, value);

                let xSteps = 16;
            }

            while (xSteps < (dx - 16)){
                let address = screenBaseAddress + (32 * (y1 + ySteps) + ((x1 + xSteps) / 16));
                do Memory.poke(address, color);

                let xSteps = xSteps + 16;
            }

            if (dolog){
                let debug[4] = xSteps;
                let debug[5] = dx;
            }

            let mod = Screen.mod(x1 + dx, 16);

            if (mod > 0){
                let address = screenBaseAddress + (32 * (y1 + ySteps) + ((x1 + dx) / 16));
                let value = Memory.peek(address);
                while (~(mod < 0)){             
                    if (currentColor = 1){
                        let value = value | powersOfTwo[mod];
                    }
                    else{
                        let value = value & ~(powersOfTwo[mod]);
                    }
                    
                    let mod = mod - 1;
                }

                do Memory.poke(address, value);  

                if (dolog = false){
                    let address = screenBaseAddress + (32 * (y1 + ySteps) + ((x1 + (dx - 16)) / 16));
                    let value = Memory.peek(address);
                    do Memory.poke(address, 0);

                    let debug[0] = value;
                    let dolog = true;
                }

            }

            let ySteps = ySteps + 1;
        }
    
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle2(int x1, int y1, int x2, int y2) {
        var int d, steps;

        let d = y2 - y1;
        let steps = 0;

        while (~(steps > d)){
            do Screen.drawStraightLine(x1, y1 + steps, x2, y1 + steps);
            let steps = steps + 1;
        }
    
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }

    function int mod (int a, int b) {
        return  a - (b * (a / b));
    }

    function int xor(int a, int b) {
        return ((a & ~b) | (b & ~a));
    }
}
