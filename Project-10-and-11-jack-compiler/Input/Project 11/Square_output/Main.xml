<class><keyword> class </keyword><identifier category="class" usage="class name"> Main </identifier><symbol> { </symbol><subroutineDec><keyword> function </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> main </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><varDec><keyword> var </keyword><identifier> SquareGame </identifier><identifier category="local" index="0" usage="subroutine variable declaration"> game </identifier><symbol> ; </symbol></varDec><statements><letStatement><keyword> let </keyword><identifier category="local" index="0" usage="let"> game </identifier><symbol> = </symbol><expression><term><identifier category="class" usage="expression use"> SquareGame </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> new </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> do </keyword><identifier category="local" index="0" usage="do"> game </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> run </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="local" index="0" usage="do"> game </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> dispose </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><symbol> } </symbol></class>