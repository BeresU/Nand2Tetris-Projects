<class><keyword> class </keyword><identifier category="class" usage="class name"> Main </identifier><symbol> { </symbol><subroutineDec><keyword> function </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> main </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><varDec><keyword> var </keyword><identifier> Array </identifier><identifier category="local" index="0" usage="subroutine variable declaration"> a </identifier><symbol> , </symbol><identifier category="local" index="1" usage="subroutine variable declaration"> b </identifier><symbol> , </symbol><identifier category="local" index="2" usage="subroutine variable declaration"> c </identifier><symbol> ; </symbol></varDec><statements><letStatement><keyword> let </keyword><identifier category="local" index="0" usage="let"> a </identifier><symbol> = </symbol><expression><term><identifier category="class" usage="expression use"> Array </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> new </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 10 </integerConstant></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="1" usage="let"> b </identifier><symbol> = </symbol><expression><term><identifier category="class" usage="expression use"> Array </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> new </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 5 </integerConstant></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="2" usage="let"> c </identifier><symbol> = </symbol><expression><term><identifier category="class" usage="expression use"> Array </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> new </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 1 </integerConstant></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="0" usage="let"> a </identifier><symbol> [ </symbol><expression><term><integerConstant> 3 </integerConstant></term></expression><symbol> ] </symbol><symbol> = </symbol><expression><term><integerConstant> 2 </integerConstant></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="0" usage="let"> a </identifier><symbol> [ </symbol><expression><term><integerConstant> 4 </integerConstant></term></expression><symbol> ] </symbol><symbol> = </symbol><expression><term><integerConstant> 8 </integerConstant></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="0" usage="let"> a </identifier><symbol> [ </symbol><expression><term><integerConstant> 5 </integerConstant></term></expression><symbol> ] </symbol><symbol> = </symbol><expression><term><integerConstant> 4 </integerConstant></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="1" usage="let"> b </identifier><symbol> [ </symbol><expression><term><identifier category="local" index="0" usage="expression use"> a </identifier><symbol> [ </symbol><expression><term><integerConstant> 3 </integerConstant></term></expression><symbol> ] </symbol></term></expression><symbol> ] </symbol><symbol> = </symbol><expression><term><identifier category="local" index="0" usage="expression use"> a </identifier><symbol> [ </symbol><expression><term><integerConstant> 3 </integerConstant></term></expression><symbol> ] </symbol></term><symbol> + </symbol><term><integerConstant> 3 </integerConstant></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="0" usage="let"> a </identifier><symbol> [ </symbol><expression><term><identifier category="local" index="1" usage="expression use"> b </identifier><symbol> [ </symbol><expression><term><identifier category="local" index="0" usage="expression use"> a </identifier><symbol> [ </symbol><expression><term><integerConstant> 3 </integerConstant></term></expression><symbol> ] </symbol></term></expression><symbol> ] </symbol></term></expression><symbol> ] </symbol><symbol> = </symbol><expression><term><identifier category="local" index="0" usage="expression use"> a </identifier><symbol> [ </symbol><expression><term><identifier category="local" index="0" usage="expression use"> a </identifier><symbol> [ </symbol><expression><term><integerConstant> 5 </integerConstant></term></expression><symbol> ] </symbol></term></expression><symbol> ] </symbol></term><symbol> * </symbol><term><identifier category="local" index="1" usage="expression use"> b </identifier><symbol> [ </symbol><expression><term><symbol> ( </symbol><expression><term><symbol> ( </symbol><expression><term><integerConstant> 7 </integerConstant></term><symbol> - </symbol><term><identifier category="local" index="0" usage="expression use"> a </identifier><symbol> [ </symbol><expression><term><integerConstant> 3 </integerConstant></term></expression><symbol> ] </symbol></term></expression><symbol> ) </symbol></term><symbol> - </symbol><term><identifier category="class" usage="expression use"> Main </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> double </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 2 </integerConstant></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ) </symbol></term><symbol> + </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> ] </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="2" usage="let"> c </identifier><symbol> [ </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> ] </symbol><symbol> = </symbol><expression><term><keyword> null </keyword></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="2" usage="let"> c </identifier><symbol> = </symbol><expression><term><identifier category="local" index="2" usage="expression use"> c </identifier><symbol> [ </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> ] </symbol></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> printString </identifier><symbol> ( </symbol><expressionList><expression><term><stringConstant> Test 1: expected result: 5; actual result:  </stringConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> printInt </identifier><symbol> ( </symbol><expressionList><expression><term><identifier category="local" index="1" usage="expression use"> b </identifier><symbol> [ </symbol><expression><term><integerConstant> 2 </integerConstant></term></expression><symbol> ] </symbol></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> println </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> printString </identifier><symbol> ( </symbol><expressionList><expression><term><stringConstant> Test 2: expected result: 40; actual result:  </stringConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> printInt </identifier><symbol> ( </symbol><expressionList><expression><term><identifier category="local" index="0" usage="expression use"> a </identifier><symbol> [ </symbol><expression><term><integerConstant> 5 </integerConstant></term></expression><symbol> ] </symbol></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> println </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> printString </identifier><symbol> ( </symbol><expressionList><expression><term><stringConstant> Test 3: expected result: 0; actual result:  </stringConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> printInt </identifier><symbol> ( </symbol><expressionList><expression><term><identifier category="local" index="2" usage="expression use"> c </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> println </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> let </keyword><identifier category="local" index="2" usage="let"> c </identifier><symbol> = </symbol><expression><term><keyword> null </keyword></term></expression><symbol> ; </symbol></letStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier category="local" index="2" usage="expression use"> c </identifier></term><symbol> = </symbol><term><keyword> null </keyword></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Main </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> fill </identifier><symbol> ( </symbol><expressionList><expression><term><identifier category="local" index="0" usage="expression use"> a </identifier></term></expression><symbol> , </symbol><expression><term><integerConstant> 10 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> let </keyword><identifier category="local" index="2" usage="let"> c </identifier><symbol> = </symbol><expression><term><identifier category="local" index="0" usage="expression use"> a </identifier><symbol> [ </symbol><expression><term><integerConstant> 3 </integerConstant></term></expression><symbol> ] </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="2" usage="let"> c </identifier><symbol> [ </symbol><expression><term><integerConstant> 1 </integerConstant></term></expression><symbol> ] </symbol><symbol> = </symbol><expression><term><integerConstant> 33 </integerConstant></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="2" usage="let"> c </identifier><symbol> = </symbol><expression><term><identifier category="local" index="0" usage="expression use"> a </identifier><symbol> [ </symbol><expression><term><integerConstant> 7 </integerConstant></term></expression><symbol> ] </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="2" usage="let"> c </identifier><symbol> [ </symbol><expression><term><integerConstant> 1 </integerConstant></term></expression><symbol> ] </symbol><symbol> = </symbol><expression><term><integerConstant> 77 </integerConstant></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="1" usage="let"> b </identifier><symbol> = </symbol><expression><term><identifier category="local" index="0" usage="expression use"> a </identifier><symbol> [ </symbol><expression><term><integerConstant> 3 </integerConstant></term></expression><symbol> ] </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="local" index="1" usage="let"> b </identifier><symbol> [ </symbol><expression><term><integerConstant> 1 </integerConstant></term></expression><symbol> ] </symbol><symbol> = </symbol><expression><term><identifier category="local" index="1" usage="expression use"> b </identifier><symbol> [ </symbol><expression><term><integerConstant> 1 </integerConstant></term></expression><symbol> ] </symbol></term><symbol> + </symbol><term><identifier category="local" index="2" usage="expression use"> c </identifier><symbol> [ </symbol><expression><term><integerConstant> 1 </integerConstant></term></expression><symbol> ] </symbol></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol></ifStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> printString </identifier><symbol> ( </symbol><expressionList><expression><term><stringConstant> Test 4: expected result: 77; actual result:  </stringConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> printInt </identifier><symbol> ( </symbol><expressionList><expression><term><identifier category="local" index="2" usage="expression use"> c </identifier><symbol> [ </symbol><expression><term><integerConstant> 1 </integerConstant></term></expression><symbol> ] </symbol></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> println </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> printString </identifier><symbol> ( </symbol><expressionList><expression><term><stringConstant> Test 5: expected result: 110; actual result:  </stringConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> printInt </identifier><symbol> ( </symbol><expressionList><expression><term><identifier category="local" index="1" usage="expression use"> b </identifier><symbol> [ </symbol><expression><term><integerConstant> 1 </integerConstant></term></expression><symbol> ] </symbol></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier category="class" usage="do"> Output </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> println </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> function </keyword><keyword> int </keyword><identifier category="subroutine" usage="subroutine declaration"> double </identifier><symbol> ( </symbol><parameterList><keyword> int </keyword><identifier category="argument" index="0" usage="parameter list"> a </identifier></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><returnStatement><keyword> return </keyword><expression><term><identifier category="argument" index="0" usage="expression use"> a </identifier></term><symbol> * </symbol><term><integerConstant> 2 </integerConstant></term></expression><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> function </keyword><keyword> void </keyword><identifier category="subroutine" usage="subroutine declaration"> fill </identifier><symbol> ( </symbol><parameterList><identifier> Array </identifier><identifier category="argument" index="0" usage="parameter list"> a </identifier><symbol> , </symbol><keyword> int </keyword><identifier category="argument" index="1" usage="parameter list"> size </identifier></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><whileStatement><keyword> while </keyword><symbol> ( </symbol><expression><term><identifier category="argument" index="1" usage="expression use"> size </identifier></term><symbol> &gt; </symbol><term><integerConstant> 0 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier category="argument" index="1" usage="let"> size </identifier><symbol> = </symbol><expression><term><identifier category="argument" index="1" usage="expression use"> size </identifier></term><symbol> - </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier category="argument" index="0" usage="let"> a </identifier><symbol> [ </symbol><expression><term><identifier category="argument" index="1" usage="expression use"> size </identifier></term></expression><symbol> ] </symbol><symbol> = </symbol><expression><term><identifier category="class" usage="expression use"> Array </identifier><symbol> . </symbol><identifier category="subroutine" usage="expression use"> new </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 3 </integerConstant></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol></whileStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><symbol> } </symbol></class>